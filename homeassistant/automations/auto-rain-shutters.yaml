alias: Rain-protected shutters
description: >-
  When sensor.openweathermap_weather changes into rain/storm/shower 
  (excluding exactly "light rain"), save & close all shutters with a 
  matching input_number helper.  When it leaves those states 
  (including to "light rain"), restore positions.
trigger:
  - platform: state
    entity_id: sensor.openweathermap_weather

action:
  - choose:
      # ─── 1) Enter rain/storm/shower (≠ light rain) ───
      - conditions:
          - condition: template
            value_template: >
              {{ trigger.to_state.state | lower 
                 is match("(?i)^(?!light rain$).*(rain|storm|shower).*") }}
        sequence:
          # 1a) Save each shutter’s current_position into its helper
          - repeat:
              for_each: >
                {{ states.input_number
                   | map(attribute='entity_id')
                   | select('match',
                            '^input_number\\..*_shutter_last_position$')
                   | list }}
              sequence:
                - service: input_number.set_value
                  data:
                    entity_id: "{{ repeat.item }}"
                    value: >
                      {{ state_attr(
                          'cover.' ~
                          repeat.item.split('.')[1]
                                     .replace('_last_position',''),
                          'current_position'
                        ) }}
          # 1b) Close them all
          - service: cover.close_cover
            target:
              entity_id: >
                {{ states.input_number
                   | map(attribute='entity_id')
                   | select('match',
                            '^input_number\\..*_shutter_last_position$')
                   | map('regex_replace',
                        '^input_number\\.(.*)_last_position$',
                        'cover.\\1')
                   | list }}

      # ─── 2) Leave rain/storm/shower ───
      - conditions:
          - condition: template
            value_template: >
              {{ 
                trigger.from_state.state | lower 
                  is match("(?i)^(?!light rain$).*(rain|storm|shower).*")
                and
                trigger.to_state.state | lower 
                  is not match("(?i)^(?!light rain$).*(rain|storm|shower).*")
              }}
        sequence:
          # Restore saved positions (this covers heavy → light rain)
          - repeat:
              for_each: >
                {{ states.input_number
                   | map(attribute='entity_id')
                   | select('match',
                            '^input_number\\..*_shutter_last_position$')
                   | list }}
              sequence:
                - service: cover.set_cover_position
                  data:
                    entity_id: >
                      {{ 'cover.' ~
                         repeat.item.split('.')[1]
                                    .replace('_last_position','') }}
                    position: "{{ states(repeat.item)|int }}"

mode: single
